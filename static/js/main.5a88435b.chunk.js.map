{"version":3,"sources":["Components/Pages/SelectedCity.jsx","Components/Context/Context.jsx","Components/Weather/WeatherCard.jsx","Components/Search/SearchForm.jsx","Components/Pages/Search.jsx","Components/Pages/Home.jsx","Components/Weather/WeatherDetailList.jsx","Components/Pages/WeatherDetail.jsx","App.js","index.js"],"names":["SelectedCity","selectedCity","removeCity","className","length","map","city","to","onClick","Context","React","createContext","WeatherCard","props","useContext","addCity","isSelected","includes","cityName","icon","countryName","src","alt","Math","round","temp","feelsLike","weatherDescription","wind","toFixed","disabled","SearchForm","weatherRequest","setError","setCityInfo","setIsRequested","useState","inputValue","setInputValue","hist","useHistory","current","useParams","useEffect","replace","onSubmit","e","preventDefault","push","type","placeholder","value","onChange","target","Search","apiKey","error","isLoaded","setIsLoaded","isRequested","cityInfo","searchForm","URL","fetch","then","data","ok","json","Promise","reject","statusText","catch","err","name","sys","country","main","description","speed","cities","Home","randCitiesIndex","floor","random","WeatherDetailList","weatherList","weatherItem","slice","dt","monthNames","WeatherDetail","fiveDay","setFiveDay","useRouteMatch","path","url","list","split","filter","date","ind","arr","month","day","window","location","href","Date","getDate","toString","App","localStorage","getItem","JSON","parse","setSelectedCity","setItem","stringify","Provider","prev","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a88435b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst SelectedCity = ({ selectedCity, removeCity }) => {\r\n  return (\r\n    <div className='selected'>\r\n      {\r\n        selectedCity.length\r\n          ?\r\n          <ul className='selected__ul'>\r\n            {\r\n              selectedCity.map(city =>\r\n                (\r\n                    <li className='selected__li' key={city}>\r\n                      <Link className='selected__link' to={`/search/city=${city}`}>\r\n                        {city}\r\n                      </Link>\r\n                      <button className='btn__remove' onClick={ () => removeCity(city) }>\r\n                        X\r\n                      </button>\r\n                    </li>\r\n                )\r\n              )\r\n            }\r\n          </ul>\r\n          : <p className='selected__empty-value' >No selected cities</p>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default SelectedCity;","import React from 'react';\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context\r\n","import React, { useContext } from 'react';\r\nimport Context from \"../Context/Context\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst WeatherCard = (props) => {\r\n  const { addCity, selectedCity } = useContext(Context)\r\n  const isSelected = selectedCity.includes(props.cityName)\r\n  const icon = `https://openweathermap.org/img/wn/${props.icon}@2x.png`\r\n\r\n\r\n  return (\r\n    <div className='weather-card card'>\r\n      <div className='card-container'>\r\n\r\n        <div className='card__location'>\r\n          <span>Weather for </span>\r\n          <span className='card__city'>{ props.cityName }</span>\r\n          <span className='card__country'> ({ props.countryName })</span>\r\n        </div>\r\n\r\n        <div className='card__5-day'>\r\n          <Link to={`/weather/${props.cityName}/today+0day`}>\r\n            Weather for 5 days\r\n          </Link>\r\n        </div>\r\n\r\n        <div className='card__flex-container'>\r\n          <img className='card__icon' src={icon} alt=\"\"/>\r\n          <div className='card__temp-container'>\r\n            <p className='card__temp'>{ Math.round(props.temp - 273) }°C</p>\r\n            <p className='card__temp-feels-like'>Feels like: { Math.round(props.feelsLike - 273) }°C</p>\r\n          </div>\r\n        </div>\r\n\r\n        <p className='card__description'>{ props.weatherDescription }</p>\r\n        <p className='card__wind'>Wind: { props.wind.toFixed(1) }m/s</p>\r\n\r\n        <button className='card__btn btn__add' disabled={isSelected} onClick={ () => addCity(props.cityName) }>\r\n          { isSelected ? 'city is selected' : 'select city' }\r\n        </button>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default WeatherCard;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\n\r\nconst SearchForm = ({ weatherRequest, setError, setCityInfo, setIsRequested }) => {\r\n  const [inputValue, setInputValue] = useState('')\r\n  const hist = useHistory()\r\n  const currentURL = useParams()\r\n  const current = currentURL.cityName\r\n\r\n\r\n  useEffect(() => {\r\n    const city = current.replace('city=', '')\r\n    setInputValue(city)\r\n\r\n    if (city) {\r\n      weatherRequest(city)\r\n    } else {\r\n      setError(false)\r\n      setIsRequested(false)\r\n      setCityInfo(null)\r\n    }\r\n  }, [current])\r\n\r\n\r\n  function searchCity(e) {\r\n    e.preventDefault()\r\n\r\n    if (inputValue === '') return\r\n\r\n    hist.push(`/search/city=${inputValue}`)\r\n  }\r\n\r\n  return (\r\n    <div className='search'>\r\n      <form className='search__form' onSubmit={searchCity}>\r\n        <input className='search__input' type=\"text\" placeholder='Write city' value={inputValue} onChange={ e => setInputValue(e.target.value) }/>\r\n        <button type='submit' className='search__btn'>\r\n          search\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default SearchForm;","import React, { useState } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport WeatherCard from \"../Weather/WeatherCard\";\r\nimport SearchForm from \"../Search/SearchForm\";\r\n\r\n\r\nconst Search = ({ apiKey }) => {\r\n  const [error, setError] = useState(false)\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const [isRequested, setIsRequested] = useState(false)\r\n  const [cityInfo, setCityInfo] = useState(null)\r\n  const currentURL = useParams()\r\n  const current = currentURL.cityName\r\n  const searchForm = <SearchForm weatherRequest={weatherRequest} error={error} setError={setError}\r\n                                 setIsLoaded={setIsLoaded} isLoaded={isLoaded} setCityInfo={setCityInfo}\r\n                                 setIsRequested={setIsRequested}/>\r\n\r\n\r\n  function weatherRequest(cityName) {\r\n    const URL = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=en&appid=${apiKey}`\r\n\r\n    fetch(URL)\r\n      .then(data => {\r\n          return data.ok\r\n            ? data.json()\r\n            : Promise.reject(data.statusText)\r\n        }\r\n      )\r\n      .then(json => {\r\n        setCityInfo(json)\r\n        setIsLoaded(true)\r\n        setError(false)\r\n        setIsRequested(true)\r\n      })\r\n      .catch(err => {\r\n        setIsLoaded(true)\r\n        setError(err)\r\n        setIsRequested(true)\r\n      })\r\n  }\r\n\r\n\r\n  if (cityInfo || isRequested){\r\n    if (error) {\r\n      return(\r\n        <div className='error'>\r\n          {searchForm}\r\n          <p className='error__text'>Error: {`\"${current.replace('city=', '')}\" ${error}`}</p>\r\n        </div>\r\n      )\r\n    } else if (!isLoaded) {\r\n      return <div className='loading'>Loading...</div>\r\n    } else {\r\n      return (\r\n        <>\r\n          {searchForm}\r\n          <div className='container'>\r\n            <WeatherCard cityName={cityInfo.name} countryName={cityInfo.sys.country}\r\n                         temp={cityInfo.main.temp} weatherDescription={cityInfo['weather'][0].description}\r\n                         icon={cityInfo['weather'][0].icon} wind={cityInfo.wind.speed} feelsLike={cityInfo.main['feels_like']}\r\n            />\r\n          </div>\r\n        </>\r\n      )\r\n    }\r\n  } else {\r\n    return (\r\n      <div>\r\n        {searchForm}\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n\r\nexport default Search;","import React, { useState, useEffect } from 'react';\r\nimport WeatherCard from \"../Weather/WeatherCard\";\r\n\r\n\r\nconst cities = [\r\n  'London',\r\n  'New York',\r\n  'Paris',\r\n  'Moscow',\r\n  'Tokyo',\r\n  'Madrid',\r\n  'Beijing',\r\n  'Dubai',\r\n  'Singapore',\r\n  'Barcelona'\r\n]\r\n\r\n\r\nconst Home = ({ apiKey }) => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [cityInfo, setCityInfo] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const randCitiesIndex = Math.floor(Math.random() * cities.length)\r\n\r\n    weatherRequest(cities[randCitiesIndex])\r\n  }, [])\r\n\r\n\r\n  function weatherRequest(cityName) {\r\n    const URL = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=en&appid=${apiKey}`\r\n\r\n    fetch(URL)\r\n      .then(data => {\r\n          return data.ok\r\n            ? data.json()\r\n            : Promise.reject(data.statusText)\r\n        }\r\n      )\r\n      .then(json => {\r\n        setCityInfo(json)\r\n        setIsLoaded(true)\r\n        setError(false)\r\n      })\r\n      .catch(err => {\r\n        setIsLoaded(true)\r\n        setError(err)\r\n      })\r\n  }\r\n\r\n\r\n  if (error) {\r\n    return (\r\n      <div className='error'>\r\n        <p>Error: {error}</p>\r\n      </div>\r\n    )\r\n  } else if (!isLoaded) {\r\n    return <div className='loading'>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <>\r\n        <div className='home-title' >Weather forecast</div>\r\n        <div className='container'>\r\n          <WeatherCard cityName={cityInfo.name} countryName={cityInfo.sys.country}\r\n                       temp={cityInfo.main.temp} weatherDescription={cityInfo['weather'][0].description}\r\n                       icon={cityInfo['weather'][0].icon} wind={cityInfo.wind.speed} feelsLike={cityInfo.main['feels_like']}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nexport default Home;","import React from 'react';\r\n\r\n\r\nconst WeatherDetailList = ({ weatherList }) => {\r\n  return (\r\n    <ul className='weather__list'>\r\n      {\r\n        weatherList.map(weatherItem =>\r\n          (\r\n            <li  className='weather__list-item' key={ weatherItem.dt }>\r\n\r\n              <div className='weather__list-info'>\r\n                { weatherItem['dt_txt'].slice(11, 16) }\r\n              </div>\r\n\r\n              <div className='weather__list-info weather__temp'>\r\n                { Math.round(weatherItem.main.temp  - 273) }°C\r\n              </div>\r\n\r\n              <div className='weather__list-info'>\r\n                <img src={ `https://openweathermap.org/img/wn/${weatherItem['weather'][0].icon}@2x.png` } alt=\"\"/>\r\n              </div>\r\n\r\n              <div className='weather__list-info'>\r\n                { weatherItem['weather'][0].description }\r\n              </div>\r\n\r\n              <div className='weather__list-info'>\r\n                Wind: { weatherItem.wind.speed.toFixed(1) }m/s\r\n              </div>\r\n\r\n              <div className='weather__list-info'>\r\n                <p>Feels like: { Math.round(weatherItem.main['feels_like']  - 273) }°C</p>\r\n              </div>\r\n\r\n            </li>\r\n          )\r\n        )\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\n\r\nexport default WeatherDetailList;","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams, useRouteMatch, Switch, Route } from \"react-router-dom\";\r\n\r\nimport WeatherDetailList from \"../Weather/WeatherDetailList\";\r\n\r\n\r\nconst monthNames = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\"\r\n];\r\n\r\n\r\nconst WeatherDetail = ({ apiKey }) => {\r\n  const [error, setError] = useState(false)\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const [cityInfo, setCityInfo] = useState(null)\r\n  const [fiveDay, setFiveDay] = useState([])\r\n  const { path, url } = useRouteMatch()\r\n  const currentURL = useParams()\r\n  const current = currentURL.cityName\r\n\r\n\r\n  useEffect(() => {\r\n    weatherRequest(current)\r\n  }, [])\r\n\r\n\r\n  function weatherRequest(cityName) {\r\n    const URL = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&lang=en&appid=${apiKey}`\r\n\r\n    fetch(URL)\r\n      .then(data => {\r\n          return data.ok\r\n            ? data.json()\r\n            : Promise.reject(data.statusText)\r\n        }\r\n      )\r\n      .then(json => {\r\n        setCityInfo(json)\r\n        setFiveDay(\r\n          json.list\r\n            .map(weatherItem => weatherItem['dt_txt']\r\n              .slice(5, 10)\r\n              .split('-'))\r\n            .filter((date, ind, arr) => ind !== 0 ? date[1] !== arr[ind - 1][1] : true)\r\n            .map(date => ({ month: date[0], day: date[1] }))\r\n        )\r\n        setIsLoaded(true)\r\n      })\r\n      .catch(err => {\r\n        setError(err)\r\n        setIsLoaded(true)\r\n      })\r\n  }\r\n\r\n\r\n  if (error) {\r\n    return <div className='error'>\r\n      <p className='error__text'>Error: {`\"${current}\" ${error}`}</p>\r\n    </div>\r\n  } else if (!isLoaded) {\r\n    return <div className='loading'>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div className='weather-item weather'>\r\n\r\n        <div className='weather__title'>\r\n          <div className='weather__location'>\r\n            <span className='weather__city'>\r\n              { cityInfo.city.name }\r\n            </span>\r\n            <span className='weather__country'>\r\n             ({ cityInfo.city.country })\r\n          </span>\r\n          </div>\r\n        </div>\r\n\r\n        <nav className='nav nav-weather'>\r\n          <ul className='nav__list'>\r\n            {\r\n              fiveDay.map((date, ind) => (\r\n                <li key={date.day} className={window.location.href.includes(`+${ind}`) ? 'nav__item nav__item_active' : 'nav__item'}>\r\n                  <Link className='nav__link'  to={`${url}/today+${ind}day`}>\r\n                    {\r\n                      date.day !== new Date().getDate().toString()\r\n                        ? `${date.day} ${monthNames[date.month - 1]}`\r\n                        : 'Today'\r\n                    }\r\n                  </Link>\r\n                </li>\r\n                )\r\n              )\r\n            }\r\n          </ul>\r\n        </nav>\r\n\r\n\r\n        <div className='weather__list-container'>\r\n          <Switch>\r\n            {\r\n              fiveDay.map((date, ind) => (\r\n                <Route key={date.day} path={`${path}/today+${ind}day`}>\r\n                  <WeatherDetailList cityInfo={cityInfo} monthNames={monthNames}\r\n                                     weatherList={cityInfo.list.filter(weatherItem => weatherItem['dt_txt'].slice(8, 10) === date.day)}/>\r\n                </Route>\r\n                )\r\n              )\r\n            }\r\n          </Switch>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default WeatherDetail;","import './index.css';\nimport { useEffect, useState } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport SelectedCity from \"./Components/Pages/SelectedCity\";\nimport Search from \"./Components/Pages/Search\";\nimport Context from \"./Components/Context/Context\";\nimport Home from \"./Components/Pages/Home\";\nimport WeatherDetail from \"./Components/Pages/WeatherDetail\";\n\nconst apiKey = \"60881de5bfadd478bce737c02789308b\";\n\nfunction App() {\n  const [selectedCity, setSelectedCity] = useState(localStorage.getItem('selectedCity')\n    ? JSON.parse(localStorage.getItem('selectedCity'))\n    : [])\n\n\n  useEffect(() => {\n    localStorage.setItem('selectedCity', JSON.stringify(selectedCity))\n  }, [selectedCity])\n\n\n  const addCity = cityName => {\n    if ( !selectedCity.includes(cityName) ) {\n      setSelectedCity( prev => [...prev, cityName] )\n    }\n  }\n\n  const removeCity = cityName => setSelectedCity( prev => prev.filter(city => city !== cityName) )\n\n\n  return (\n    <div className=\"App\">\n      <nav className='nav'>\n        <ul className='nav__list' >\n\n          <li className='nav__item'>\n            <Link className='nav__link' to='/search/city='>\n              Search\n            </Link>\n          </li>\n\n          <li className='nav__item'>\n            <Link className='nav__link' to='/selected'>\n              Selected\n            </Link>\n          </li>\n\n        </ul>\n      </nav>\n\n      <Context.Provider value={{ addCity, selectedCity }}>\n        <Switch>\n\n          <Route exact path='/' >\n            <Home apiKey={apiKey}/>\n          </Route>\n\n          <Route path='/search/:cityName'>\n            <Search apiKey={apiKey}/>\n          </Route>\n\n          <Route path='/selected'>\n            <SelectedCity selectedCity={selectedCity} removeCity={removeCity}/>\n          </Route>\n\n          <Route path='/weather/:cityName'>\n            <WeatherDetail apiKey={apiKey}/>\n          </Route>\n\n        </Switch>\n      </Context.Provider>\n    </div>\n  )\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}