{"version":3,"sources":["components/Pages/SelectedCity.jsx","components/Context/Context.jsx","components/Weather/WeatherCard.jsx","api/api.js","components/Search/SearchForm.jsx","components/Pages/Search.jsx","components/Pages/Home.jsx","components/Weather/WeatherDetailList.jsx","components/Pages/WeatherDetail.jsx","components/App.js","index.js"],"names":["SelectedCity","selectedCity","removeCity","className","length","map","city","to","onClick","Context","React","createContext","WeatherCard","props","useContext","addCity","isSelected","includes","cityName","icon","countryName","src","alt","Math","round","temp","feelsLike","weatherDescription","wind","toFixed","disabled","apiKey","SearchForm","setError","setCityInfo","setIsRequested","setIsLoaded","useState","inputValue","setInputValue","hist","useHistory","current","useParams","useEffect","replace","URL","fetch","then","data","ok","json","Promise","reject","statusText","catch","err","weatherRequestSearch","onSubmit","e","preventDefault","push","type","placeholder","value","onChange","target","Search","error","isLoaded","isRequested","cityInfo","searchForm","name","sys","country","main","weather","description","speed","feels_like","cities","Home","randCitiesIndex","floor","random","weatherRequestHome","WeatherDetailList","weatherList","weatherItem","dt_txt","slice","dt","monthNames","WeatherDetail","fiveDay","setFiveDay","useRouteMatch","path","url","list","split","filter","date","ind","arr","month","day","weatherRequestDetail","window","location","href","Date","getDate","toString","App","localStorage","getItem","JSON","parse","setSelectedCity","setItem","stringify","Provider","prev","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a3fc216.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SelectedCity = ({ selectedCity, removeCity }) => {\r\n  return (\r\n    <div className='selected'>\r\n      {\r\n        selectedCity.length\r\n          ?\r\n          <ul className='selected__ul'>\r\n            {\r\n              selectedCity.map(city =>\r\n                (\r\n                    <li className='selected__li' key={city}>\r\n                      <Link className='selected__link' to={`/search/city=${city}`}>\r\n                        {city}\r\n                      </Link>\r\n                      <button className='btn__remove' onClick={ () => removeCity(city) }>\r\n                        X\r\n                      </button>\r\n                    </li>\r\n                )\r\n              )\r\n            }\r\n          </ul>\r\n          : <p className='selected__empty-value' >No selected cities</p>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedCity","import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context\r\n","import React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Context from '../Context/Context'\r\n\r\nconst WeatherCard = (props) => {\r\n  const { addCity, selectedCity } = useContext(Context)\r\n  const isSelected = selectedCity.includes(props.cityName)\r\n  const icon = `https://openweathermap.org/img/wn/${props.icon}@2x.png`\r\n\r\n  return (\r\n    <div className='weather-card card'>\r\n      <div className='card-container'>\r\n\r\n        <div className='card__location'>\r\n          <span>Weather for </span>\r\n          <span className='card__city'>{ props.cityName }</span>\r\n          <span className='card__country'> ({ props.countryName })</span>\r\n        </div>\r\n\r\n        <div className='card__5-day'>\r\n          <Link to={`/weather-detail/${props.cityName}/today+0day`}>\r\n            Weather for 5 days\r\n          </Link>\r\n        </div>\r\n\r\n        <div className='card__flex-container'>\r\n          <img className='card__icon' src={icon} alt=\"\"/>\r\n          <div className='card__temp-container'>\r\n            <p className='card__temp'>{ Math.round(props.temp - 273) }°C</p>\r\n            <p className='card__temp-feels-like'>Feels like: { Math.round(props.feelsLike - 273) }°C</p>\r\n          </div>\r\n        </div>\r\n\r\n        <p className='card__description'>{ props.weatherDescription }</p>\r\n        <p className='card__wind'>Wind: { props.wind.toFixed(1) }m/s</p>\r\n\r\n        <button className='card__btn btn__add' disabled={isSelected} onClick={ () => addCity(props.cityName) }>\r\n          { isSelected ? 'city is selected' : 'select city' }\r\n        </button>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherCard","const apiKey = '60881de5bfadd478bce737c02789308b'\r\n\r\nexport function weatherRequestHome(cityName, setCityInfo, setIsLoaded, setError) {\r\n  const URL = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=en&appid=${apiKey}`\r\n\r\n  fetch(URL)\r\n    .then(data => {\r\n        return data.ok\r\n          ? data.json()\r\n          : Promise.reject(data.statusText)\r\n      }\r\n    )\r\n    .then(json => {\r\n      setCityInfo(json)\r\n      setIsLoaded(true)\r\n      setError(false)\r\n    })\r\n    .catch(err => {\r\n      setIsLoaded(true)\r\n      setError(err)\r\n    })\r\n}\r\n\r\nexport function weatherRequestSearch(cityName, setCityInfo, setIsLoaded, setError, setIsRequested) {\r\n  const URL = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=en&appid=${apiKey}`\r\n\r\n  fetch(URL)\r\n    .then(data => {\r\n        return data.ok\r\n          ? data.json()\r\n          : Promise.reject(data.statusText)\r\n      }\r\n    )\r\n    .then(json => {\r\n      setCityInfo(json)\r\n      setIsLoaded(true)\r\n      setError(false)\r\n      setIsRequested(true)\r\n    })\r\n    .catch(err => {\r\n      setIsLoaded(true)\r\n      setError(err)\r\n      setIsRequested(true)\r\n    })\r\n}\r\n\r\nexport function weatherRequestDetail(cityName, setCityInfo, setIsLoaded, setError, setFiveDay) {\r\n  const URL = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&lang=en&appid=${apiKey}`\r\n\r\n  fetch(URL)\r\n    .then(data => {\r\n        return data.ok\r\n          ? data.json()\r\n          : Promise.reject(data.statusText)\r\n      }\r\n    )\r\n    .then(json => {\r\n      setCityInfo(json)\r\n      setFiveDay(\r\n        json.list\r\n          .map(weatherItem => weatherItem.dt_txt\r\n            .slice(5, 10)\r\n            .split('-'))\r\n          .filter((date, ind, arr) => ind !== 0 ? date[1] !== arr[ind - 1][1] : true)\r\n          .map(date => ({\r\n            month: date[0],\r\n            day: date[1],\r\n            weatherList: json.list\r\n              .filter(weatherItem => weatherItem.dt_txt.slice(8, 10) === date[1])\r\n          }))\r\n      )\r\n      setIsLoaded(true)\r\n    })\r\n    .catch(err => {\r\n      setError(err)\r\n      setIsLoaded(true)\r\n    })\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport { weatherRequestSearch } from '../../api/api'\r\n\r\nconst SearchForm = ({ setError, setCityInfo, setIsRequested, setIsLoaded }) => {\r\n  const [inputValue, setInputValue] = useState('')\r\n  const hist = useHistory()\r\n  const currentURL = useParams()\r\n  const current = currentURL.cityName\r\n\r\n  useEffect(() => {\r\n    const city = current.replace('city=', '')\r\n    setInputValue(city)\r\n\r\n    if (city) {\r\n      weatherRequestSearch(city, setCityInfo, setIsLoaded, setError, setIsRequested)\r\n    } else {\r\n      setError(false)\r\n      setIsRequested(false)\r\n      setCityInfo(null)\r\n    }\r\n  }, [current])\r\n\r\n  function searchCity(e) {\r\n    e.preventDefault()\r\n\r\n    if (inputValue !== '') {\r\n      hist.push(`/search/city=${inputValue}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='search'>\r\n      <form className='search__form' onSubmit={searchCity}>\r\n        <input className='search__input' type=\"text\" placeholder='Write city' value={inputValue} onChange={ e => setInputValue(e.target.value) }/>\r\n        <button type='submit' className='search__btn'>\r\n          search\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchForm","import React, { useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport WeatherCard from '../Weather/WeatherCard'\r\nimport SearchForm from '../Search/SearchForm'\r\n\r\nconst Search = () => {\r\n  const [error, setError] = useState(false)\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const [isRequested, setIsRequested] = useState(false)\r\n  const [cityInfo, setCityInfo] = useState(null)\r\n  const currentURL = useParams()\r\n  const current = currentURL.cityName\r\n  const searchForm = <SearchForm setError={setError} setIsLoaded={setIsLoaded} isLoaded={isLoaded}\r\n                                 setCityInfo={setCityInfo} setIsRequested={setIsRequested}/>\r\n\r\n  if (cityInfo || isRequested){\r\n    if (error) {\r\n      return(\r\n        <div className='error'>\r\n          {searchForm}\r\n          <p className='error__text'>Error: {`\"${current.replace('city=', '')}\" ${error}`}</p>\r\n        </div>\r\n      )\r\n    } else if (!isLoaded) {\r\n      return <div className='loading'>Loading...</div>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {searchForm}\r\n        <div className='container'>\r\n          <WeatherCard cityName={cityInfo.name} countryName={cityInfo.sys.country}\r\n                       temp={cityInfo.main.temp} weatherDescription={cityInfo.weather[0].description}\r\n                       icon={cityInfo.weather[0].icon} wind={cityInfo.wind.speed} feelsLike={cityInfo.main.feels_like}\r\n          />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {searchForm}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Search","import React, { useState, useEffect } from 'react'\r\nimport { weatherRequestHome } from '../../api/api'\r\n\r\nimport WeatherCard from '../Weather/WeatherCard'\r\n\r\nconst cities = [\r\n  'London',\r\n  'New York',\r\n  'Paris',\r\n  'Moscow',\r\n  'Tokyo',\r\n  'Madrid',\r\n  'Beijing',\r\n  'Dubai',\r\n  'Singapore',\r\n  'Barcelona'\r\n]\r\n\r\nconst Home = () => {\r\n  const [error, setError] = useState(null)\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const [cityInfo, setCityInfo] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const randCitiesIndex = Math.floor(Math.random() * cities.length)\r\n\r\n    weatherRequestHome(cities[randCitiesIndex], setCityInfo, setIsLoaded, setError)\r\n  }, [])\r\n\r\n  if (error) {\r\n    return (\r\n      <div className='error'>\r\n        <p>Error: {error}</p>\r\n      </div>\r\n    )\r\n  } else if (!isLoaded) {\r\n    return <div className='loading'>Loading...</div>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='home-title'>Weather forecast</div>\r\n      <div className='container'>\r\n        <WeatherCard cityName={cityInfo.name} countryName={cityInfo.sys.country}\r\n                     temp={cityInfo.main.temp} weatherDescription={cityInfo.weather[0].description}\r\n                     icon={cityInfo.weather[0].icon} wind={cityInfo.wind.speed} feelsLike={cityInfo.main.feels_like}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\n\r\nconst WeatherDetailList = ({ weatherList }) => {\r\n  return (\r\n    <ul className='weather__list'>\r\n      {\r\n        weatherList.map(weatherItem =>\r\n          (\r\n            <li  className='weather__list-item' key={ weatherItem.dt }>\r\n\r\n              <div className='weather__list-info'>\r\n                { weatherItem.dt_txt.slice(11, 16) }\r\n              </div>\r\n\r\n              <div className='weather__list-info weather__temp'>\r\n                { Math.round(weatherItem.main.temp  - 273) }°C\r\n              </div>\r\n\r\n              <div className='weather__list-info'>\r\n                <img src={ `https://openweathermap.org/img/wn/${weatherItem['weather'][0].icon}@2x.png` } alt=\"\"/>\r\n              </div>\r\n\r\n              <div className='weather__list-info'>\r\n                { weatherItem.weather[0].description }\r\n              </div>\r\n\r\n              <div className='weather__list-info'>\r\n                Wind: { weatherItem.wind.speed.toFixed(1) }m/s\r\n              </div>\r\n\r\n              <div className='weather__list-info'>\r\n                <p>Feels like: { Math.round(weatherItem.main.feels_like  - 273) }°C</p>\r\n              </div>\r\n\r\n            </li>\r\n          )\r\n        )\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default WeatherDetailList","import React, { useEffect, useState } from 'react'\r\nimport { Link, useParams, useRouteMatch, Switch, Route } from 'react-router-dom'\r\n\r\nimport { weatherRequestDetail } from '../../api/api'\r\nimport WeatherDetailList from '../Weather/WeatherDetailList'\r\n\r\nconst monthNames = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\"\r\n];\r\n\r\nconst WeatherDetail = () => {\r\n  const [error, setError] = useState(false)\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const [cityInfo, setCityInfo] = useState(null)\r\n  const [fiveDay, setFiveDay] = useState([])\r\n  const { path, url } = useRouteMatch()\r\n  const currentURL = useParams()\r\n  const current = currentURL.cityName\r\n\r\n  useEffect(() => {\r\n    weatherRequestDetail(current, setCityInfo, setIsLoaded, setError, setFiveDay)\r\n  }, [])\r\n\r\n  if (error) {\r\n    return <div className='error'>\r\n      <p className='error__text'>Error: {`\"${current}\" ${error}`}</p>\r\n    </div>\r\n  } else if (!isLoaded) {\r\n    return <div className='loading'>Loading...</div>\r\n  }\r\n\r\n  return (\r\n    <div className='weather-item weather'>\r\n\r\n      <div className='weather__title'>\r\n        <div className='weather__location'>\r\n          <span className='weather__city'>\r\n            {cityInfo.city.name}\r\n          </span>\r\n          <span className='weather__country'>\r\n            ({cityInfo.city.country})\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <nav className='nav nav-weather'>\r\n        <ul className='nav__list'>\r\n          {\r\n            fiveDay.map((date, ind) => (\r\n              <li key={date.day} className={window.location.href.includes(`+${ind}`) ? 'nav__item nav__item_active' : 'nav__item'}>\r\n                <Link className='nav__link'  to={`${url}/today+${ind}day`}>\r\n                  {\r\n                    date.day !== new Date().getDate().toString()\r\n                      ? `${date.day} ${monthNames[date.month - 1]}`\r\n                      : 'Today'\r\n                  }\r\n                </Link>\r\n              </li>\r\n              )\r\n            )\r\n          }\r\n        </ul>\r\n      </nav>\r\n\r\n      <div className='weather__list-container'>\r\n        <Switch>\r\n          {\r\n            fiveDay.map((date, ind) => (\r\n              <Route key={date.day} path={`${path}/today+${ind}day`}>\r\n                <WeatherDetailList cityInfo={cityInfo} monthNames={monthNames} weatherList={date.weatherList}/>\r\n              </Route>\r\n              )\r\n            )\r\n          }\r\n        </Switch>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherDetail","import '../stylessheets/index.css'\n\nimport { useEffect, useState } from 'react'\nimport { Switch, Route, Link } from 'react-router-dom'\n\nimport SelectedCity from './Pages/SelectedCity'\nimport Search from './Pages/Search'\nimport Context from './Context/Context'\nimport Home from './Pages/Home'\nimport WeatherDetail from './Pages/WeatherDetail'\n\nfunction App() {\n  const [selectedCity, setSelectedCity] = useState(\n    localStorage.getItem('selectedCity')\n      ? JSON.parse(localStorage.getItem('selectedCity'))\n      : []\n  )\n\n  useEffect(() => {\n    localStorage.setItem('selectedCity', JSON.stringify(selectedCity))\n  }, [selectedCity])\n\n  const addCity = cityName => {\n    if ( !selectedCity.includes(cityName) ) {\n      setSelectedCity( prev => [...prev, cityName] )\n    }\n  }\n\n  const removeCity = cityName => setSelectedCity( prev => prev.filter(city => city !== cityName) )\n\n  return (\n    <div className=\"App\">\n      <nav className='nav'>\n        <ul className='nav__list' >\n\n          <li className='nav__item'>\n            <Link className='nav__link' to='/search/city='>\n              Search\n            </Link>\n          </li>\n\n          <li className='nav__item'>\n            <Link className='nav__link' to='/selected'>\n              Selected\n            </Link>\n          </li>\n\n        </ul>\n      </nav>\n\n      <Context.Provider value={{ addCity, selectedCity }}>\n        <Switch>\n\n          <Route exact path='/weather' >\n            <Home/>\n          </Route>\n\n          <Route path='/search/:cityName'>\n            <Search/>\n          </Route>\n\n          <Route path='/selected'>\n            <SelectedCity selectedCity={selectedCity} removeCity={removeCity}/>\n          </Route>\n\n          <Route path='/weather-detail/:cityName'>\n            <WeatherDetail/>\n          </Route>\n\n        </Switch>\n      </Context.Provider>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}